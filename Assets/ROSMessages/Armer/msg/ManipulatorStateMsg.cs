//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Armer
{
    [Serializable]
    public class ManipulatorStateMsg : Message
    {
        public const string k_RosMessageName = "armer_msgs/ManipulatorState";
        public override string RosMessageName => k_RosMessageName;

        public const ushort ESTOP = 1;
        public const ushort COLLISION = 2;
        public const ushort JOINT_LIMIT_VIOLATION = 4;
        public const ushort TORQUE_LIMIT_VIOLATION = 8;
        public const ushort CARTESIAN_LIMIT_VIOLATION = 16;
        public const ushort LOCKED = 32;
        public const ushort OTHER = 32768;
        public Geometry.PoseStampedMsg ee_pose;
        public Geometry.TwistStampedMsg ee_velocity;
        public Geometry.WrenchStampedMsg ee_wrench;
        public double[] joint_poses;
        //  rad
        public double[] joint_velocities;
        //  rad/s
        public double[] joint_torques;
        //  Nm
        public double[] cartesian_collision;
        public double[] cartesian_contact;
        public ushort errors;

        public ManipulatorStateMsg()
        {
            this.ee_pose = new Geometry.PoseStampedMsg();
            this.ee_velocity = new Geometry.TwistStampedMsg();
            this.ee_wrench = new Geometry.WrenchStampedMsg();
            this.joint_poses = new double[0];
            this.joint_velocities = new double[0];
            this.joint_torques = new double[0];
            this.cartesian_collision = new double[6];
            this.cartesian_contact = new double[6];
            this.errors = 0;
        }

        public ManipulatorStateMsg(Geometry.PoseStampedMsg ee_pose, Geometry.TwistStampedMsg ee_velocity, Geometry.WrenchStampedMsg ee_wrench, double[] joint_poses, double[] joint_velocities, double[] joint_torques, double[] cartesian_collision, double[] cartesian_contact, ushort errors)
        {
            this.ee_pose = ee_pose;
            this.ee_velocity = ee_velocity;
            this.ee_wrench = ee_wrench;
            this.joint_poses = joint_poses;
            this.joint_velocities = joint_velocities;
            this.joint_torques = joint_torques;
            this.cartesian_collision = cartesian_collision;
            this.cartesian_contact = cartesian_contact;
            this.errors = errors;
        }

        public static ManipulatorStateMsg Deserialize(MessageDeserializer deserializer) => new ManipulatorStateMsg(deserializer);

        private ManipulatorStateMsg(MessageDeserializer deserializer)
        {
            this.ee_pose = Geometry.PoseStampedMsg.Deserialize(deserializer);
            this.ee_velocity = Geometry.TwistStampedMsg.Deserialize(deserializer);
            this.ee_wrench = Geometry.WrenchStampedMsg.Deserialize(deserializer);
            deserializer.Read(out this.joint_poses, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.joint_velocities, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.joint_torques, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.cartesian_collision, sizeof(double), 6);
            deserializer.Read(out this.cartesian_contact, sizeof(double), 6);
            deserializer.Read(out this.errors);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.ee_pose);
            serializer.Write(this.ee_velocity);
            serializer.Write(this.ee_wrench);
            serializer.WriteLength(this.joint_poses);
            serializer.Write(this.joint_poses);
            serializer.WriteLength(this.joint_velocities);
            serializer.Write(this.joint_velocities);
            serializer.WriteLength(this.joint_torques);
            serializer.Write(this.joint_torques);
            serializer.Write(this.cartesian_collision);
            serializer.Write(this.cartesian_contact);
            serializer.Write(this.errors);
        }

        public override string ToString()
        {
            return "ManipulatorStateMsg: " +
            "\nee_pose: " + ee_pose.ToString() +
            "\nee_velocity: " + ee_velocity.ToString() +
            "\nee_wrench: " + ee_wrench.ToString() +
            "\njoint_poses: " + System.String.Join(", ", joint_poses.ToList()) +
            "\njoint_velocities: " + System.String.Join(", ", joint_velocities.ToList()) +
            "\njoint_torques: " + System.String.Join(", ", joint_torques.ToList()) +
            "\ncartesian_collision: " + System.String.Join(", ", cartesian_collision.ToList()) +
            "\ncartesian_contact: " + System.String.Join(", ", cartesian_contact.ToList()) +
            "\nerrors: " + errors.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
